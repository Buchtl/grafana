version: '3.8'

services:
  postgres:
    image: postgres:16.9-bookworm
    user: "${USER_UID}:${USER_GID}"
    environment:
      POSTGRES_USER: app
      POSTGRES_DB: appdb
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - "${WORKING_DIR}/config/postgres/init-multiple-db.sh:/docker-entrypoint-initdb.d/init-multiple-db.sh"
      #- /srv/data/postgres:/var/lib/postgresql/data/pgdata
      #- "${WORKING_DIR}/data/postgres/appdb.sql:/docker-entrypoint-initdb.d/appdb.sql"
      - "${WORKING_DIR}/config/postgres/restore.sh:/docker-entrypoint-initdb.d/restore.sh"
      - "${WORKING_DIR}/data/postgres/appdb.dump:/docker-entrypoint-initdb.d/appdb.dump"
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  adminer:
    image: adminer:5.3.0
    user: "${USER_UID}:${USER_GID}"
    restart: always
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8080 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana:12.1.0-ubuntu
    depends_on:
      - keycloak
    user: "${USER_UID}:${USER_GID}"
    secrets:
      - grafana_admin_password
      - postgres_password
    entrypoint:
      - sh
      - -c
      - |
        update-ca-certificates
        exec /run.sh
    environment:
      - GF_LOG_FILTERS=provisioning.dashboard:debug
      - GF_INSTALL_PLUGINS=yesoreyeram-infinity-datasource
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password
      - GF_USERS_HOME_PAGE=/d/d4acfa1d-0701-4c76-842e-a34bde89f50a/ByCategory
      - GF_NEWS_NEWS_FEED_ENABLED=false
      #- GF_SECURITY_ADMIN_API_KEY=bootstrap-admin-key
      # Keycloak
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_ROOT_URL=https://${HOSTNAME}:8444
      - GF_SERVER_CERT_FILE=/etc/grafana/grafana.crt
      - GF_SERVER_CERT_KEY=/etc/grafana/grafana.key
      - GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH=contains(resource_access.grafana.roles, 'admin') && 'Admin' || 'Viewer'
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_OAUTH_AUTO_LOGIN=true
      - GF_AUTH_GENERIC_OAUTH_ENABLED=true
      - GF_AUTH_GENERIC_OAUTH_NAME=Keycloak
      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=grafana
      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=FA7eOmIpkog7ggBvKAzA6KjDnIYEKHlk
      - GF_AUTH_GENERIC_OAUTH_SCOPES="openid profile email"
      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=https://${KC_HOSTNAME}:8446/realms/grafana/protocol/openid-connect/auth
      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=https://${KC_HOSTNAME}:8446/realms/grafana/protocol/openid-connect/token
      - GF_AUTH_GENERIC_OAUTH_API_URL=https://${KC_HOSTNAME}:8446/realms/grafana/protocol/openid-connect/userinfo
    ports:
      - 8444:3000
    volumes:
        - "${WORKING_DIR}/config/grafana/provisioning:/etc/grafana/provisioning"
        - "${WORKING_DIR}/certs/localhost.crt.pem:/etc/grafana/grafana.crt"
        - "${WORKING_DIR}/certs/localhost.key.pem:/etc/grafana/grafana.key"
        - "${WORKING_DIR}/certs/ca.crt.pem:/usr/local/share/ca-certificates/ca.crt"
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -sf https://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  pgadmin:
    image: dpage/pgadmin4:9.6.0
    ports:
      - "8082:80" 
    secrets:
      - pgadmin_admin_password
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin            
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - "${WORKING_DIR}/config/pgadmin/pgadmin-entrypoint.sh:/pgadmin-entrypoint.sh:ro"
      #- pgadmin_data:/var/lib/pgadmin   # Persistent storage
    configs:
      - source: pgadmin_servers
        target: /pgadmin4/servers.json
        mode: 044
    entrypoint: ["/pgadmin-entrypoint.sh"]
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 50s

  keycloak:
    image: keycloak/keycloak:26.3
    depends_on:
      - postgres
    user: "${USER_UID}:${USER_GID}"
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-keycloak}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: ${KC_DB_USERNAME:-keycloak}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD:-keycloak}
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_PROXY: edge
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/certs/localhost.crt.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/certs/localhost.key.pem
    command:
      - start
      - --http-enabled=true
      - --http-port=8080
      - --hostname=${KC_HOSTNAME}
      - --hostname-strict=false
      - --proxy-headers=xforwarded
      - --import-realm
    volumes:
      - "${WORKING_DIR}/config/keycloak/grafana-realm.json:/opt/keycloak/data/import/grafana-realm.json"
      - "${WORKING_DIR}/certs:/opt/keycloak/conf/certs/"
    ports:
      - "8446:8443"
    healthcheck:
      test: ["CMD-SHELL", "exec /bin/sh -c 'timeout 2 cat < /dev/null >/dev/null 2>&1 || exit 0'"]
      interval: 10s
      timeout: 5s
      retries: 10
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

volumes:
  pgadmin_data:
    driver: local

secrets:
  postgres_password:
    external: true
  grafana_admin_password:
    external: true
  pgadmin_admin_password:
    external: true

configs:
  pgadmin_servers:
    # Bump the name (e.g. ..._v2) whenever you change servers.json, otherwise Swarm
    # keeps the old config.
    name: pgadmin_servers_v1
    file: "${WORKING_DIR}/config/pgadmin/servers.json"